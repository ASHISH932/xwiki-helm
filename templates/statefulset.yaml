apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
  {{- if .Values.mysql.enabled }}
    app: "{{ .Values.image.name }}-{{ .Chart.AppVersion }}-lts-mysql-tomcat"
  {{- else if .Values.postgresql.enabled }}
    app: "{{ .Values.image.name }}-{{ .Chart.AppVersion }}-lts-postgres-tomcat"
  {{- else }}
    app: {{ .Values.image.name }}-{{ .Chart.AppVersion }}-{{ .Values.image.tag }}
  {{- end }}
    version: "{{ .Chart.AppVersion }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
spec:  
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "fullname" . }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }} # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
      {{- if .Values.mysql.enabled }}
        image: "{{ .Values.image.name }}:lts-mysql-tomcat"
      {{- else if .Values.postgresql.enabled }}
        image: "{{ .Values.image.name }}:lts-postgres-tomcat"
      {{- else }}
        image: {{ .Values.image.name }}:{{ .Values.image.tag }}
      {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
        {{- if .Values.mysql.enabled }}
              name: "{{ .Release.Name }}-mysql"
              key: mysql-password
        {{- else if .Values.postgresql.enabled }}
              name: "{{ .Release.Name }}-postgresql"
              key: postgresql-password
        {{- else }}
              name: {{ .Release.Name | quote }}
              key: DB_PASSWORD
        {{- end }}
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}
              key: DB_HOST
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}
              key: DB_USER
        - name: DB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: {{ template "fullname" . }}
              key: DB_DATABASE
        resources:
{{ toYaml .Values.resources | indent 12 }}
        volumeMounts:
        - name: datadir
          mountPath: /opt/solr/server/solr
          subPath: data
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.storage }}
      {{- if .Values.storageClassName }}
      storageClassName: {{ .Values.storageClassName | quote }}
      {{- end }}
